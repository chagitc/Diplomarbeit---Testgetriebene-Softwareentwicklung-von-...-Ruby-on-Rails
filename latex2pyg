#!/usr/bin/env ruby
require "rubygems"
require "open3"
require "colorize"
require "digest"
require "active_support/all"


require 'optparse'

options = {
  :env => "ruby",
  :syntax => "ruby",
  :label => 'test/test_feed.rb'
}
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"

  opts.on("-s", "--syntax LEXER", "Syntaxlexer fuer pygmentize") do |v|
    options[:syntax] = v
  end
  opts.on("-e", "--env", "Latex-Environment zum Kapseln") do |v|
    options[:env] = v
  end
  opts.on("-c", "--label", "Standard Label/Dateiname") do |v|
    options[:label] = v
  end
end.parse!

p options


caption = options[:label].camelcase
file_label   = options[:label].gsub("_", "\\_")

filename = ARGV[0]
regex = /\\begin\{lstlisting\}(.+?)\\end\{lstlisting\}/m
listings = open(filename).read.scan(regex)
listings.each do |listing|

  lst = listing.first

  label = Digest::SHA2.hexdigest(lst)[0..5]

  stdin, stdout, stdr = Open3.popen3('pygmentize', "-l", options[:syntax], "-f", "latex")
  stdin.write lst
  stdin.close

  error = stdr.read
  text =stdout.read.gsub(/.*begin\{Verbatim\}.*/,"").gsub('\end{Verbatim}',"")
  if error.length > 0
    puts "ERROR with pygmentize:".red
    puts error
      exit
  end

  out = <<DOC

\\begin{#{options[:env]}}[label=#{file_label}]
#{text.strip}
\\end{#{options[:env]}}
\\codecaption{#{caption}}
% \label{fig:#{label}}
DOC
  snippet = lst
  snippet = snippet.split("\n").map{|i| "% #{i}"}.join("\n").strip

  puts "% -------------------------------"
  puts "% SNIPPET: \n#{snippet}".green
  puts out.strip
end



